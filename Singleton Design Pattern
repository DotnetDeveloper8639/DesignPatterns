Singleton Design Pattern:
-------------------------
Singleton design pattern defines that create instance to the resource once and use it throughout life time of the application.

//To prevent inheritance
public sealed class SingletoneClass
    {
        private static SingletoneClass? Instance = null;
//TO prevent create instance from outside the class
        private SingletoneClass()
        {
        }
        public static SingletoneClass GetInstance()
        {
            if (Instance == null)
            {
                SingletoneClass singletoneClass = new();
                Instance = singletoneClass;
            }
            return Instance;
        }
        public void PrintMessage()
        {
            Console.WriteLine("Instance Method Called");
        }
    }

Advantages:
------------

Single Instance: 
It ensures that a class has only one instance, and it provides a global point of access to that instance. This can be helpful in scenarios where exactly one object is needed to coordinate actions across the system.

Global Point of Access: 
The Singleton pattern provides a single point of access to the instance, making it easy to manage and control access to shared resources, configurations, or services.

Lazy Initialization: 
The Singleton instance can be created lazily (i.e., on-demand) rather than eagerly, which can be beneficial for performance. The instance is only created when it is first requested.

Resource Sharing: 
It is useful in scenarios where you want to share a common resource, such as a database connection, file system, or network connection, among different parts of your application.

Memory Efficiency: 
The Singleton pattern helps in saving memory by having only one instance of the class, especially when the instantiation of the object is expensive or resource-intensive.

Centralized Configuration: 
It is often used for managing configuration settings or application-wide settings in a centralized manner. Changes to the configuration can be applied in one place.

Promotes Encapsulation: 
By providing a single point of access to an instance, the Singleton pattern encapsulates the implementation details of the class, making it easy to change the internal representation without affecting the rest of the code.

Improved Testability: 
In certain scenarios, using a Singleton pattern with dependency injection can improve testability. You can replace the Singleton instance with a mock or test double during unit testing

Disadvantages:
Global State: 
The Singleton pattern introduces a global point of access to an instance, creating a global state in the application. This global state can make it challenging to reason about the flow of data and dependencies in the code, leading to potential maintenance and debugging issues.

Singleton Pattern Violations: 
Ensuring that a class has only one instance relies on proper implementation. If developers do not follow best practices, it might be possible to create multiple instances, defeating the purpose of the pattern.

Testing Challenges: 
The Singleton pattern can create challenges in unit testing. If a class relies heavily on a Singleton instance, it may be difficult to substitute it with mock objects or test doubles for isolated unit testing.

Tight Coupling: 
The Singleton pattern can lead to tight coupling between classes and the Singleton instance. This tight coupling can make the code less modular and harder to maintain, as changes to the Singleton implementation may affect other parts of the code.

Concurrency Issues: 
In a multithreaded environment, if not implemented carefully, the Singleton pattern may lead to concurrency issues. Without proper synchronization mechanisms, multiple threads could create multiple instances of the Singleton class, or race conditions may occur.

Difficulty in Subclassing:
Subclassing a Singleton class can be challenging. If you need to create a subclass of a Singleton, it may be necessary to modify the Singleton pattern implementation, which can introduce complexity and potential issues.

Global Dependency: 
The use of Singleton introduces a global dependency in the code. This can make it harder to understand and modify individual components of the system independently.
